name: Build, Test, and Publish Docker Image

on:
  push:
    branches:
      - main
      - dev

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: ghcr.io/adrianoggm/cc.2024-2025.gestion-de-penas-de-futbol
      IMAGE_TAG: ${{ github.sha }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Docker
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          ca-certificates \
          curl \
          gnupg \
          lsb-release

        # Agregar la clave GPG oficial de Docker
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

        # Configurar el repositorio estable
        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
          $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io

        # Verificar instalación
        docker --version

    - name: Install Docker Compose
      run: |
        DOCKER_COMPOSE_VERSION=2.20.2
        sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Start Docker Service
      run: |
        sudo systemctl start docker
        sudo systemctl enable docker

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          pip install pytest requests

    - name: Run Tests
      run: pytest tests/*

    - name: Build Docker Image
      run: |
        docker build -t $IMAGE_NAME:$IMAGE_TAG .
        docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest

    - name: Log in to GitHub Container Registry
      run: echo ${{ secrets.GHCR_PASSWORD }} | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin

    - name: Push Docker Image
      run: |
        docker push $IMAGE_NAME:$IMAGE_TAG
        docker push $IMAGE_NAME:latest

    - name: Start Docker Compose
      run: docker-compose up -d

    - name: Wait for services to be ready
      run: |
        echo "Esperando a que los servicios estén listos..."
        for i in {1..30}; do
          nc -z localhost 8000 && echo "Servicio disponible" && exit 0
          echo "Esperando 2 segundos..."
          sleep 2
        done
        echo "Los servicios no se iniciaron a tiempo." >&2
        exit 1

    - name: Tear down Docker Compose
      if: always()
      run: docker-compose down
